// State 0: Go to right side

0#*<1 // When right border is found jump to state 2
0**>0 // With any other symbol go to right

// State 1
// Search for next 0 on left side starting from current position.

10 <2 // when find a 0 remove it, move left and jump to state 2 (search for a 1)
11*<1 // when find a 1 just continue left
1#*=! // when the bound is found then terminate

// State 2: Search for 1

2#*=4 // When left border is found jump to state 4
210>3 // when 1 is found put 0 and jump to state 3 (move 1 to empty space)
20*<2 // When 0 go to left

// State 3: Move the 1 to the empty space

3**>3 // When no empty space is found move right
3 1<1 // When empty space is found put 1, go left and jump to 1 (search next zero)

// Step 4: Restore the removed 0 when no 1 is found

4 0=! // When empty space is found put a 0 and jump to state 0
4**>4 // Keep going left if the empty space is not found
